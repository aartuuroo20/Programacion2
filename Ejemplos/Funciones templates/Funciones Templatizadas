template<typename T>
void print(T const & a){
  std::cout << a << "\n";
}

struct Persona{
  std::string nombre;
  int edad;
};

template<typename T>
void print(T const & a){
  std::cout << a << "\n";
}

template<>
void print(Persona const & a){
  std::cout << "nombre: " << a.nombre << "\n";
  std::cout << "edad: " << a.edad << "\n";
}

template<class T, class Y>
void print(T const & a, Y const &b){
  std::cout << a << "\n";
  std::cout << b << "\n";
}
--------------------------------------------------------------
template <class T, class Y>
void forEach(T const & v, std::function<void(Y)> const & op){
  for(auto elem: v){
    op(elem);
  }
}
  std::vector<int> v{1,2,3,4};
  forEach<std::vector<int>, int>(v, [](auto elem){
    std::cout << elem << "\n";
  });
  
  template <class T, class Y>
T filter(T const & v, std::function<bool(Y)> const & f){
  T result;
  for(auto elem: v){
    if(f(elem)) result.push_back(elem);
  }

  return result;
}

template <class T, class Y>
T map(T const & v, std::function<Y(Y)> const & f){
  T result;
  for(auto elem: v){
    result.push_back(f(elem));
  }

  return result;
}

template <class T, class Y>
Y find(T const & v, std::function<bool(Y)> const & f){
  
  for(auto elem: v){
    if(f(elem)) return elem;
  }

  return Y{};
}

